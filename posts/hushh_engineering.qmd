---
title: "Trusted Python Engineering at Hushh"
description: "Maintaining trusted deployments at Hushh are paramount.  Here we dive into our best practices on one of our open source libraries"
author: "Justin Donaldson"
date: "3/7/2024"

categories:
  - python
  - engineering
  - open source
---


![Trusted Python Engineering at Hushh](images/omgjjd_man_coding_at_laptop._purple_and_red._secure._17ac0cdb-8822-4e07-be28-bfb0d073d73f.png)

# Trusted Python Engineering at Hushh

Hushh utilizes cutting edge open source AI and ML libraries, and most AI
startups will claim the same.  However, Hushh's emphasis on trust and security
means that we also have to make these capabilities stable and safe.  We will
walk through some of the techniques we use to develop and deploy software,
using our open source [hushh catalog
format](https://hushh-labs.github.io/hushh-labs-blog/posts/you_dont_need_a_vector_database.html)
as an example.

## Stable AI/ML libraries with Conda

Many state of the art AI libraries are available in Python.  However, Python is
not typically used to write the core logic of these libraries.  Instead, Python
is simply a convenient wrapper around a series of low level C libraries that handle the
tensor operations that constitute a neural network routine.

Adding to this complexity is the fact that many neural network libraries are
not up to date with the latest Python version.  For instance, the popular
Pytorch library only recently supported Python 3.12, despite the version being
available in [October of last year](https://peps.python.org/pep-0693/).

At Hushh we rely heavily on the work of [Anaconda](https://www.anaconda.com/),
including the open source [conda forge](https://conda-forge.org/) packages. The
Conda community maintains stable python distributions for AI/ML libraries,
ensuring we have the most up to date and secure python environment possible for
our services. For our open source projects we will provide an
[environment.yml](https://github.com/hushh-labs/hushh-vibe-catalog/blob/main/environment.yml)
file that specifies how to set up the conda environment.  The environment can
typically be installed and activated with:

```
$> conda env create -f environment.yml
$> conda activate hushh-vibe-catalog
```


## Easy environment switching with direnv

At Hushh, we have many different projects and Conda environments going at once.
The projects may require different versions of libraries, or require other
specific configuration. This can be a source of confusion when switching
between them for development work. Luckily, a tool called
[direnv](https://direnv.net/) exists that enables us to switch between project
environments as easily as switching between working directories.

To enable this functionality, direnv will refer to an .envrc file in the root of the working directory.
You can see one of these in the HCF library [here](https://github.com/hushh-labs/hushh-vibe-catalog/blob/main/.envrc)

```
eval "$(conda shell.zsh hook)"
conda activate hushh-vibe-catalog
```

When we enter the directory, we execute a simple conda shell.zsh hook to load
the conda commands, and then we activate the HCF conda environment.  When we
exit the directory, the environment is unloaded.

## Configuring Python Libraries Poetry vs. Modern PEP standards

Within the Python ecosystem, there's a host of frameworks that make it "easy"
to do a number of different automated tasks.  Tools like
[poetry](https://python-poetry.org/) make it easy to configure and publish libraries.

In the past, we've experimented with these frameworks and found that they're
truly an improvement over the antiquated and cludgy Python configuration
systems that are offered out of the box.  *However*, Python has modernized
significantly in the past year or two, including supporting the new
[pyproject.toml](https://pip.pypa.io/en/stable/reference/build-system/pyproject-toml/)
that greatly simplifies the specification of libraries, dependencies, and environments.

At this point, it's clear to us that Python is a constantly evolving standard,
and that frameworks that try to remove rough edges can quickly become technical
debt as Python includes those features through more universally-accepted PEP standards.

So, our recommendation is to stick with basic vanilla Python-standards for
packaging these days, and just try to keep your versions up to date :)


## pip-compile and dependabot

One feature that Vanilla Python lacks currently is a way to show

## Testing Python Libraries

## Good old Makefiles

## Pypi and Trusted Deployments

## CICD with Github Actions
